{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["PRESENCE_LINKS","name","url","RELEASES_LINKS","details","LIVE_LINKS","VIDEO_LINKS","App","_renderLinks","links","react_default","a","createElement","map","link","className","href","target","rel","_renderSection","_this","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yNAGMA,SAAiB,CACrB,CAAEC,KAAM,WAAYC,IAAK,mCACzB,CAAED,KAAM,aAAcC,IAAK,oCAC3B,CAAED,KAAM,YAAaC,IAAK,wCAC1B,CAAED,KAAM,SAAUC,IAAK,iCAGnBC,EAAiB,CACrB,CAAEF,KAAM,aAAcC,IAAK,kDAAmDE,QAAS,YACvF,CAAEH,KAAM,iBAAkBC,IAAK,sDAAuDE,QAAS,YAC/F,CAAEH,KAAM,oBAAqBC,IAAK,yDAA0DE,QAAS,aAGjGC,EAAa,CACjB,CAAEJ,KAAM,uBAAwBC,IAAK,wEAAyEE,QAAS,0EACvH,CAAEH,KAAM,iBAAkBC,IAAK,mDAAoDE,QAAS,uCAC5F,CAAEH,KAAM,uBAAwBC,IAAK,2EAA4EE,QAAS,4EAC1H,CAAEH,KAAM,kCAAgCC,IAAK,4JAA6JE,QAAS,4EAG/ME,EAAc,CAClB,CAAEL,KAAM,8BAA+BC,IAAK,8CAA+CE,QAAS,kCACpG,CAAEH,KAAM,qBAAsBC,IAAK,8CAA+CE,QAAS,qCAsC9EG,6MAlCbC,aAAe,SAACC,GACd,OACEC,EAAAC,EAAAC,cAAA,UACGH,EAAMI,IAAI,SAAAC,GAAI,OACbJ,EAAAC,EAAAC,cAAA,MAAIG,UAAU,aACZL,EAAAC,EAAAC,cAAA,KAAGI,KAAMF,EAAKZ,IAAKe,OAAO,SAASC,IAAI,uBAAuBJ,EAAKb,MAClEa,EAAKV,QAAWM,EAAAC,EAAAC,cAAA,QAAMG,UAAU,WAAWD,EAAKV,SAAmB,YAO9Ee,eAAiB,SAAClB,EAAMQ,GACtB,OACEC,EAAAC,EAAAC,cAAA,OAAKG,UAAU,WACbL,EAAAC,EAAAC,cAAA,SAAIX,GACHmB,EAAKZ,aAAaC,6EAMvB,OACEC,EAAAC,EAAAC,cAAA,OAAKG,UAAU,OACZM,KAAKF,eAAe,aAAcnB,GAClCqB,KAAKF,eAAe,WAAYhB,GAChCkB,KAAKF,eAAe,iCAAkCd,GACtDgB,KAAKF,eAAe,QAASb,WA7BpBgB,aChBEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOnB,EAAAC,EAAAC,cAACkB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.51cb9c9f.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\n\nconst PRESENCE_LINKS = [\n  { name: 'Bandcamp', url: 'https://bitgraves.bandcamp.com/' },\n  { name: 'SoundCloud', url: 'https://soundcloud.com/bitgraves' },\n  { name: 'Instagram', url: 'https://www.instagram.com/bitgraves/' },\n  { name: 'GitHub', url: 'http://github.com/bitgraves' },\n];\n\nconst RELEASES_LINKS = [\n  { name: 'Frames 1-3', url: 'https://bitgraves.bandcamp.com/album/frames-1-3', details: 'Dec 2018' },\n  { name: 'Entropic Stare', url: 'https://bitgraves.bandcamp.com/album/entropic-stare', details: 'May 2018' },\n  { name: 'Recovery Sequence', url: 'https://bitgraves.bandcamp.com/album/recovery-sequence', details: 'Oct 2017' },\n];\n\nconst LIVE_LINKS = [\n  { name: 'Wayward Music Series', url: 'http://www.waywardmusic.org/event/you-died-tree-cathedral-bit-graves/', details: 'Apr 12, 2019 at The Chapel, Seattle, with YOU DIED! and Tree Cathedral' },\n  { name: 'Modular Nights', url: 'https://www.facebook.com/events/244738663059273/', details: 'Nov 17, 2018 at Substation, Seattle' },\n  { name: 'Wayward Music Series', url: 'http://www.waywardmusic.org/event/bit-graves-jordan-rundle-marcus-price/', details: 'Jun 15, 2018 at The Chapel, Seattle, with Jordan Rundle and Marcus Price' },\n  { name: 'Harmony Korine RÃ©trospective', url: 'https://www.centrepompidou.fr/cpv/agenda/event.action?param.id=FR_R-c0df2f56ea7a6fce6a17a459145ac63f&param.idSource=FR_E-c0df2f56ea7a6fce6a17a459145ac63f', details: 'Oct 6 - Nov 15, 2017, installation with video at Centre Pompidou, Paris' },\n];\n\nconst VIDEO_LINKS = [\n  { name: 'Live @ Wayward Music Series', url: 'https://www.youtube.com/watch?v=gt75p-YhP8M', details: 'full performance, Jun 15, 2018' },\n  { name: 'Processing Chamber', url: 'https://www.youtube.com/watch?v=WAK9QDFg2so', details: 'in the living room, Aug 28, 2017' },\n];\n\nclass App extends Component {\n  _renderLinks = (links) => {\n    return (\n      <ul>\n        {links.map(link => (\n          <li className=\"link-item\">\n            <a href={link.url} target=\"_blank\" rel=\"noopener noreferrer\">{link.name}</a>\n            {link.details ? (<span className=\"details\">{link.details}</span>) : null}\n          </li>\n        ))}\n      </ul>\n    );\n  };\n\n  _renderSection = (name, links) => {\n    return (\n      <div className=\"section\">\n        <p>{name}</p>\n        {this._renderLinks(links)}\n      </div>\n    );\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        {this._renderSection('bit graves', PRESENCE_LINKS)}\n        {this._renderSection('releases', RELEASES_LINKS)}\n        {this._renderSection('performances and installations', LIVE_LINKS)}\n        {this._renderSection('video', VIDEO_LINKS)}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}